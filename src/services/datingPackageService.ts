
export interface DatingPackage {
  id: string;
  name: string;
  description: string;
  price: number;
  duration: number; // days, -1 for unlimited
  features: string[];
}

export const DATING_PACKAGES: DatingPackage[] = [
  {
    id: 'dating_week',
    name: 'Premium 1 Tu·∫ßn',
    description: 'Tr·∫£i nghi·ªám premium trong 7 ng√†y',
    price: 49000,
    duration: 7,
    features: [
      'Kh√¥ng gi·ªõi h·∫°n l∆∞·ª£t swipe',
      'Xem ai ƒë√£ th√≠ch b·∫°n',
      'Super Like kh√¥ng gi·ªõi h·∫°n',
      'Boost h·ªì s∆° 1 l·∫ßn/ng√†y',
      '·∫®n qu·∫£ng c√°o'
    ]
  },
  {
    id: 'dating_month',
    name: 'Premium 1 Th√°ng',
    description: 'G√≥i ph·ªï bi·∫øn nh·∫•t cho tr·∫£i nghi·ªám t·ªëi ∆∞u',
    price: 149000,
    duration: 30,
    features: [
      'T·∫•t c·∫£ t√≠nh nƒÉng g√≥i tu·∫ßn',
      'Rewind kh√¥ng gi·ªõi h·∫°n',
      'Passport - ƒê·ªïi v·ªã tr√≠',
      'Read receipts',
      'Top Picks h√†ng ng√†y',
      'H·ªó tr·ª£ ∆∞u ti√™n'
    ]
  },
  {
    id: 'dating_unlimited',
    name: 'Premium Vƒ©nh Vi·ªÖn',
    description: 'S·ªü h·ªØu t·∫•t c·∫£ t√≠nh nƒÉng premium m√£i m√£i',
    price: 399000,
    duration: -1,
    features: [
      'T·∫•t c·∫£ t√≠nh nƒÉng premium',
      'Kh√¥ng gi·ªõi h·∫°n th·ªùi gian',
      'Badge Premium ƒë·∫∑c bi·ªát',
      '∆Øu ti√™n hi·ªÉn th·ªã t·ªëi ƒëa',
      'T√≠nh nƒÉng m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t mi·ªÖn ph√≠',
      'H·ªó tr·ª£ VIP 24/7'
    ]
  }
];

// Generate unique order code
const generateOrderCode = () => {
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 1000);
  return parseInt(`${timestamp}${random}`.slice(-9));
};

export const createDatingPackagePayment = async (
  packageId: string,
  userId: string,
  userEmail?: string
) => {
  try {
    console.log('üöÄ Creating dating package payment:', { packageId, userId, userEmail });
    
    // Validate input data
    if (!packageId || typeof packageId !== 'string') {
      throw new Error('Package ID kh√¥ng h·ª£p l·ªá');
    }
    
    if (!userId || typeof userId !== 'string') {
      throw new Error('User ID kh√¥ng h·ª£p l·ªá');
    }
    
    const selectedPackage = DATING_PACKAGES.find(pkg => pkg.id === packageId);
    if (!selectedPackage) {
      throw new Error(`G√≥i ${packageId} kh√¥ng t·ªìn t·∫°i`);
    }
    
    console.log('‚úÖ Package validated:', selectedPackage);
    
    // Generate unique order code
    const orderCode = generateOrderCode();
    console.log('üìù Generated order code:', orderCode);
    
    const requestData = {
      orderCode: orderCode,
      userId: userId,
      userEmail: userEmail || '',
      packageType: packageId,
      returnUrl: `${window.location.origin}/payment-success`,
      cancelUrl: `${window.location.origin}/payment-cancel`,
    };
    
    console.log('üì§ Sending payment request:', requestData);
    
    const response = await fetch('https://oeepmsbttxfknkznbnym.supabase.co/functions/v1/create-payos-payment', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestData),
    });

    let result;
    try {
      result = await response.json();
    } catch (parseError) {
      console.error('‚ùå Failed to parse response JSON:', parseError);
      throw new Error('L·ªói ph·∫£n h·ªìi t·ª´ server kh√¥ng h·ª£p l·ªá');
    }
    
    console.log('üì• PayOS response:', {
      status: response.status,
      ok: response.ok,
      result: result
    });
    
    if (!response.ok) {
      const errorMessage = result?.message || `HTTP Error ${response.status}`;
      console.error('‚ùå API call failed:', errorMessage);
      throw new Error(errorMessage);
    }

    if (result.error && result.error !== 0) {
      console.error('‚ùå PayOS error response:', result);
      throw new Error(result.message || 'L·ªói t·ª´ PayOS API');
    }
    
    console.log('‚úÖ Payment created successfully:', result.data);
    return result;

  } catch (error) {
    console.error('üí• PayOS dating package payment error:', error);
    
    // Provide user-friendly error messages
    let userMessage = 'C√≥ l·ªói x·∫£y ra khi t·∫°o thanh to√°n';
    
    if (error.message?.includes('Package ID kh√¥ng h·ª£p l·ªá')) {
      userMessage = 'G√≥i thanh to√°n kh√¥ng h·ª£p l·ªá';
    } else if (error.message?.includes('User ID kh√¥ng h·ª£p l·ªá')) {
      userMessage = 'Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá';
    } else if (error.message?.includes('kh√¥ng t·ªìn t·∫°i')) {
      userMessage = 'G√≥i thanh to√°n kh√¥ng t·ªìn t·∫°i';
    } else if (error.message?.includes('PayOS API Error')) {
      userMessage = 'L·ªói t·ª´ h·ªá th·ªëng thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.';
    } else if (error.message?.includes('Network')) {
      userMessage = 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i.';
    } else if (error.message) {
      userMessage = error.message;
    }
    
    return {
      error: 1,
      message: userMessage,
      originalError: error.message
    };
  }
};
